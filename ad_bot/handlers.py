# handlers.py
import logging
import json
from aiogram import F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, LabeledPrice, PreCheckoutQuery,
    ContentType, WebAppInfo
)
from aiogram.methods import AnswerPreCheckoutQuery

from loader import dp, bot
from config import PROVIDER_TOKEN, CURRENCY, PRICE_PER_MONTH_RUB
from models import Order, init_db, db


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Web App –∫–Ω–æ–ø–∫–æ–π
def get_kbd():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url="https://–≤–∞—à-username.github.io")
        )],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É 1 –º–µ—Å", callback_data="buy_1")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É 3 –º–µ—Å", callback_data="buy_3")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É 6 –º–µ—Å", callback_data="buy_6")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
    ])


# /start ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ F
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞.", reply_markup=get_kbd())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message(F.content_type == 'web_app_data')
async def handle_web_app_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')

        if action == 'buy_subscription':
            months = data.get('months')
            price = data.get('price')
            user_id = data.get('user_id')

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
            total_rub = price
            amount_cents = int(total_rub * 100)

            with db.atomic():
                order = Order.create(
                    user_id=user_id or message.from_user.id,
                    payload="",
                    months=months,
                    amount=amount_cents,
                    currency=CURRENCY,
                    status="pending"
                )
                order.payload = f"order:{order.id}"
                order.save()

            prices = [LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ {months} –º–µ—Å.", amount=amount_cents)]

            if PROVIDER_TOKEN.strip().lower().endswith("test"):
                await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π provider token.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            await bot.send_invoice(
                chat_id=message.chat.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü(–∞): {total_rub} ‚ÇΩ",
                payload=order.payload,
                provider_token=PROVIDER_TOKEN,
                currency=CURRENCY,
                prices=prices,
                start_parameter=f"subscribe_{months}",
                is_flexible=False
            )

            await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–≤–æ–π—Å –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")

    except Exception as e:
        logging.error(f"Web app data error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")


# –ö–æ–ª–±–µ–∫: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã
@dp.callback_query(F.data == "my_orders")
async def cb_my_orders(callback: CallbackQuery):
    orders = Order.select().where(Order.user_id == callback.from_user.id).order_by(Order.created_at.desc())
    if orders.count() == 0:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        texts = []
        for o in orders:
            amt = o.amount / 100.0
            texts.append(f"#{o.id} ‚Äî {o.months} –º–µ—Å ‚Äî {amt:.2f} {o.currency} ‚Äî {o.status}")
        await callback.message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(texts))
    await callback.answer()


# –ö–æ–ª–±–µ–∫: –ø–æ–∫—É–ø–∫–∞ (buy_1 / buy_3 / buy_6)
@dp.callback_query(F.data.startswith("buy_"))
async def cb_buy(callback: CallbackQuery):
    data = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏ —Ü–µ–Ω—É
    if data == "buy_1":
        months = 1
        total_rub = 250  # —Ü–µ–Ω–∞ –∑–∞ 1 –º–µ—Å—è—Ü
    elif data == "buy_3":
        months = 3
        total_rub = 500  # —Ü–µ–Ω–∞ –∑–∞ 3 –º–µ—Å—è—Ü–∞
    elif data == "buy_6":
        months = 6
        total_rub = 750  # —Ü–µ–Ω–∞ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
        return

    amount_cents = int(total_rub * 100)

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ –ë–î
    with db.atomic():
        order = Order.create(
            user_id=callback.from_user.id,
            payload="",
            months=months,
            amount=amount_cents,
            currency=CURRENCY,
            status="pending"
        )
        order.payload = f"order:{order.id}"
        order.save()

    prices = [LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ {months} –º–µ—Å.", amount=amount_cents)]

    if PROVIDER_TOKEN.strip().lower().endswith("test"):
        await callback.message.answer("–í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π provider token.")

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü(–∞): {total_rub} ‚ÇΩ",
        payload=order.payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter=f"subscribe_{months}",
        is_flexible=False
    )

    await callback.answer()


# pre_checkout_query ‚Äî –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö kwargs (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–∞–∫ –µ—Å—Ç—å)
@dp.pre_checkout_query()
async def process_pre_checkout(pre: PreCheckoutQuery):
    try:
        payload = pre.invoice_payload
    except Exception:
        payload = None

    if not payload:
        logging.warning("PreCheckout without payload")
        await AnswerPreCheckoutQuery(pre_checkout_query_id=pre.id, ok=False, error_message="Invalid payload")
        return

    order_id = None
    if payload.startswith("order:"):
        try:
            order_id = int(payload.split(":", 1)[1])
        except Exception:
            order_id = None

    if not order_id:
        logging.warning("PreCheckout payload parse failed: %s", payload)
        await AnswerPreCheckoutQuery(pre_checkout_query_id=pre.id, ok=False, error_message="Order not found")
        return

    order = Order.get_or_none(Order.id == order_id)
    if not order:
        logging.warning("Order not found for precheckout: %s", order_id)
        await AnswerPreCheckoutQuery(pre_checkout_query_id=pre.id, ok=False, error_message="Order not found")
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É
    if pre.total_amount != order.amount or pre.currency != order.currency:
        logging.warning("Amount mismatch: pre=%s %s db=%s %s", pre.total_amount, pre.currency, order.amount,
                        order.currency)
        await AnswerPreCheckoutQuery(pre_checkout_query_id=pre.id, ok=False, error_message="Amount mismatch")
        return

    await AnswerPreCheckoutQuery(pre_checkout_query_id=pre.id, ok=True)


# successful_payment ‚Äî –∑–∞–º–µ–Ω—è–µ–º content_types –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ —Ñ–∏–ª—å—Ç—Ä F
@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: Message):
    pay = message.successful_payment
    # payload –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ pay.invoice_payload (–≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏)
    payload = getattr(pay, "invoice_payload", None) or getattr(pay, "payload", None)
    provider_id = getattr(pay, "provider_payment_charge_id", None)
    telegram_id = getattr(pay, "telegram_payment_charge_id", None)

    order = None
    if payload and payload.startswith("order:"):
        try:
            oid = int(payload.split(":", 1)[1])
            order = Order.get_or_none(Order.id == oid)
        except Exception:
            order = None

    if not order:
        logging.error("Successful payment but order not found. payload=%s", payload)
        await message.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É.")
        return

    order.status = "paid"
    order.provider_payment_charge_id = provider_id
    order.telegram_payment_charge_id = telegram_id
    order.save()

    total = pay.total_amount / 100.0
    await message.answer(
        f"–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ‚úÖ\n–°—É–º–º–∞: {total:.2f} {pay.currency}\n–ó–∞–∫–∞–∑ #{order.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
    await message.answer("–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω ‚Äî —Å–ø–∞—Å–∏–±–æ! (—Ç—É—Ç –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏)")
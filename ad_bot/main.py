import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command  # <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from aiogram.types import (  # <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –ø–ª–∞—Ç–µ–∂–µ–π
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice
)

# ‚ö° –ü–ï–†–ï–ú–ï–ù–ù–´–ï AD BOT - –∑–∞–º–µ–Ω–∏ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Railway
AD_BOT_TOKEN = "8222866315:AAFkZW560q7bkQkRQsto5GA6FP4JSihHNbE"  # –¢–æ–∫–µ–Ω ad –±–æ—Ç–∞
PROVIDER_TOKEN = "1744374395:TEST:3e689d9dea8c18ad5daf"  # –ü–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
CURRENCY = "RUB"
PRICE_PER_MONTH_RUB = 500
DATABASE_PATH = "payments.db"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if AD_BOT_TOKEN == "YOUR_AD_BOT_TOKEN_HERE":
    raise ValueError("‚ùå AD_BOT_TOKEN not set! Please set it in Railway variables")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=AD_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DATABASE_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER NOT NULL,
                  amount INTEGER NOT NULL,
                  currency TEXT NOT NULL,
                  status TEXT DEFAULT 'pending',
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()


# –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ad bot
@dp.message(Command("start"))
async def cmd_start(message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="buy_ad")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_orders")]
    ])

    await message.answer(
        f"ü§ñ <b>–ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {PRICE_PER_MONTH_RUB} {CURRENCY} –∑–∞ –º–µ—Å—è—Ü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "buy_ad")
async def process_buy_ad(callback):
    prices = [LabeledPrice(label="–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç (1 –º–µ—Å—è—Ü)", amount=PRICE_PER_MONTH_RUB * 100)]

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç",
        description="–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –Ω–∞ 1 –º–µ—Å—è—Ü",
        payload="ad_payment",
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY.lower(),
        prices=prices
    )


async def main():
    init_db()
    try:
        await dp.start_polling(bot, skip_updates=False)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())